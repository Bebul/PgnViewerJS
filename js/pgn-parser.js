/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
var pgnParser =
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { pgn: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(pw, all) { var arr = (all ? all : []); arr.unshift(pw);return arr; },
          function(pb, all) { var arr = (all ? all : []); arr.unshift(pb); return arr; },
          function() { return [[]]; },
          function(pw) { return pw; },
          function(pb) { return pb; },
          function(cm, mn, cb, hm, nag, ca, vari, all) { var arr = (all ? all : []);
                var move = {}; move.turn = 'w'; move.moveNumber = mn;
                move.notation = hm; move.commentBefore = cb; move.commentAfter = ca; move.commentMove = cm;
                move.variations = (vari ? vari : []); move.nag = (nag ? nag : null); arr.unshift(move); return arr; },
          function(cm, me, cb, hm, nag, ca, vari, all) { var arr = (all ? all : []);
                var move = {}; move.turn = 'b'; move.moveNumber = me;
                move.notation = hm; move.commentBefore = cb; move.commentAfter = ca;
                move.variations = (vari ? vari : []); arr.unshift(move); move.nag = (nag ? nag : null); return arr; },
          "1:0",
          peg$literalExpectation("1:0", false),
          function() { return ["1:0"]; },
          "0:1",
          peg$literalExpectation("0:1", false),
          function() { return ["0:1"]; },
          "1-0",
          peg$literalExpectation("1-0", false),
          function() { return ["1-0"]; },
          "0-1",
          peg$literalExpectation("0-1", false),
          function() { return ["0-1"]; },
          "1/2-1/2",
          peg$literalExpectation("1/2-1/2", false),
          function() { return ["1/2-1/2"]; },
          "*",
          peg$literalExpectation("*", false),
          function() { return ["*"]; },
          /^[^}]/,
          peg$classExpectation(["}"], true, false),
          function(cm) { return cm.join("").trim(); },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function(vari, all, me) { var arr = (all ? all : []); arr.unshift(vari); return arr; },
          function(vari, all) { var arr = (all ? all : []); arr.unshift(vari); return arr; },
          "(",
          peg$literalExpectation("(", false),
          ")",
          peg$literalExpectation(")", false),
          ".",
          peg$literalExpectation(".", false),
          function(num) { return num; },
          peg$otherExpectation("integer"),
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          function(digits) { return makeInteger(digits); },
          " ",
          peg$literalExpectation(" ", false),
          function() { return '';},
          function(fig, disc, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.disc =  (disc ? disc : null); hm.strike = (str ? str : null); hm.col = col; hm.row = row; hm.check = (ch ? ch : null); hm.promotion = pr; hm.notation = (fig ? fig : "") + (disc ? disc : "") + (str ? str : "") + col + row + (pr ? pr : "") + (ch ? ch : ""); return hm; },
          function(fig, cols, rows, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.strike = (str =='x' ? str : null); hm.col = col; hm.row = row; hm.check = (ch ? ch : null); hm.notation = (fig && (fig!=='P') ? fig : "") + cols + rows + (str=='x' ? str : "-") + col  + row + (pr ? pr : "") + (ch ? ch : ""); hm.promotion = pr; return hm; },
          function(fig, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.strike = (str ? str : null); hm.col = col; hm.row = row; hm.check = (ch ? ch : null); hm.notation = (fig ? fig : "") + (str ? str : "") + col  + row + (pr ? pr : "") + (ch ? ch : ""); hm.promotion = pr; return hm; },
          "O-O-O",
          peg$literalExpectation("O-O-O", false),
          function(ch) { var hm = {}; hm.notation = 'O-O-O'+ (ch ? ch : ""); hm.check = (ch ? ch : null); return  hm; },
          "O-O",
          peg$literalExpectation("O-O", false),
          function(ch) { var hm = {}; hm.notation = 'O-O'+ (ch ? ch : ""); hm.check = (ch ? ch : null); return  hm; },
          "+-",
          peg$literalExpectation("+-", false),
          "+",
          peg$literalExpectation("+", false),
          function(ch) { return ch[1]; },
          "$$$",
          peg$literalExpectation("$$$", false),
          "#",
          peg$literalExpectation("#", false),
          "=",
          peg$literalExpectation("=", false),
          function(f) { return '=' + f; },
          function(nag, nags) { var arr = (nags ? nags : []); arr.unshift(nag); return arr; },
          "$",
          peg$literalExpectation("$", false),
          function(num) { return '$' + num; },
          "!!",
          peg$literalExpectation("!!", false),
          function() { return '$3'; },
          "??",
          peg$literalExpectation("??", false),
          function() { return '$4'; },
          "!?",
          peg$literalExpectation("!?", false),
          function() { return '$5'; },
          "?!",
          peg$literalExpectation("?!", false),
          function() { return '$6'; },
          "!",
          peg$literalExpectation("!", false),
          function() { return '$1'; },
          "?",
          peg$literalExpectation("?", false),
          function() { return '$2'; },
          "\u203C",
          peg$literalExpectation("\u203C", false),
          "\u2047",
          peg$literalExpectation("\u2047", false),
          "\u2049",
          peg$literalExpectation("\u2049", false),
          "\u2048",
          peg$literalExpectation("\u2048", false),
          "\u25A1",
          peg$literalExpectation("\u25A1", false),
          function() { return '$7'; },
          function() { return '$10'; },
          "\u221E",
          peg$literalExpectation("\u221E", false),
          function() { return '$13'; },
          "\u2A72",
          peg$literalExpectation("\u2A72", false),
          function() { return '$14'; },
          "\u2A71",
          peg$literalExpectation("\u2A71", false),
          function() { return '$15';},
          "\xB1",
          peg$literalExpectation("\xB1", false),
          function() { return '$16';},
          "\u2213",
          peg$literalExpectation("\u2213", false),
          function() { return '$17';},
          function() { return '$18';},
          "-+",
          peg$literalExpectation("-+", false),
          function() { return '$19';},
          "\u2A00",
          peg$literalExpectation("\u2A00", false),
          function() { return '$22'; },
          "\u27F3",
          peg$literalExpectation("\u27F3", false),
          function() { return '$32'; },
          "\u2192",
          peg$literalExpectation("\u2192", false),
          function() { return '$36'; },
          "\u2191",
          peg$literalExpectation("\u2191", false),
          function() { return '$40'; },
          "\u21C6",
          peg$literalExpectation("\u21C6", false),
          function() { return '$132'; },
          "D",
          peg$literalExpectation("D", false),
          function() { return '$220'; },
          /^[RNBQKP]/,
          peg$classExpectation(["R", "N", "B", "Q", "K", "P"], false, false),
          /^[a-h]/,
          peg$classExpectation([["a", "h"]], false, false),
          /^[1-8]/,
          peg$classExpectation([["1", "8"]], false, false),
          "x",
          peg$literalExpectation("x", false),
          "-",
          peg$literalExpectation("-", false)
        ],

        peg$bytecode = [
          peg$decode("%;!/7#;$.\" &\"/)$8\": \"\"! )(\"'#&'#.W &%;\"/7#;#.\" &\"/)$8\":!\"\"! )(\"'#&'#.3 &%;/.\" &\"/& 8!:\"! )"),
          peg$decode("%;#/' 8!:#!! )"),
          peg$decode("%;$/' 8!:$!! )"),
          peg$decode("%;/.\" &\"/\xEE#;&.\" &\"/\xE0$;/.\" &\"/\xD2$;-.\" &\"/\xC4$;/.\" &\"/\xB6$;&.\" &\"/\xA8$;/.\" &\"/\x9A$;0/\x91$;/.\" &\"/\x83$;3.\" &\"/u$;/.\" &\"/g$;&.\" &\"/Y$;/.\" &\"/K$;).\" &\"/=$;$.\" &\"//$8/:%/(-+)'%#! )(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.# &;%"),
          peg$decode("%;/.\" &\"/\xEE#;&.\" &\"/\xE0$;/.\" &\"/\xD2$;7.\" &\"/\xC4$;/.\" &\"/\xB6$;&.\" &\"/\xA8$;/.\" &\"/\x9A$;0/\x91$;/.\" &\"/\x83$;3.\" &\"/u$;/.\" &\"/g$;&.\" &\"/Y$;/.\" &\"/K$;*.\" &\"/=$;#.\" &\"//$8/:&/(-+)'%#! )(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.# &;%"),
          peg$decode("%2'\"\"6'7(/& 8!:)! ).\x90 &%2*\"\"6*7+/& 8!:,! ).y &%2-\"\"6-7./& 8!:/! ).b &%20\"\"6071/& 8!:2! ).K &%23\"\"6374/& 8!:5! ).4 &%26\"\"6677/& 8!:8! )"),
          peg$decode("%;'/S#$49\"\"5!7:/,#0)*49\"\"5!7:&&&#/1$;(/($8#:;#!!)(#'#(\"'#&'#"),
          peg$decode("2<\"\"6<7="),
          peg$decode("2>\"\"6>7?"),
          peg$decode("%;+/t#;#/k$;,/b$;/.\" &\"/T$;).\" &\"/F$;/.\" &\"/8$;7.\" &\"/*$8':@'#%\" )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;+/W#;\"/N$;,/E$;/.\" &\"/7$;*.\" &\"/)$8%:A%\"# )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2B\"\"6B7C"),
          peg$decode("2D\"\"6D7E"),
          peg$decode("%;./<#2F\"\"6F7G.\" &\"/($8\":H\"!!)(\"'#&'#"),
          peg$decode("<%$4J\"\"5!7K/,#0)*4J\"\"5!7K&&&#/' 8!:L!! )=.\" 7I"),
          peg$decode("%$2M\"\"6M7N/,#0)*2M\"\"6M7N&&&#/& 8!:O! )"),
          peg$decode("%;8.\" &\"/\x88#%<;6=/##&'!&&#/s$;5/j$;;.\" &\"/\\$;9/S$;:/J$;2.\" &\"/<$;1.\" &\"/.$8(:P(''%$#\"! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0139 &%;8.\" &\"/}#;9/t$;:/k$;<.\" &\"/]$;9/T$;:/K$;2.\" &\"/=$;1.\" &\"//$8(:Q(('&%$#\"! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xCA &%;8.\" &\"/i#;;.\" &\"/[$;9/R$;:/I$;2.\" &\"/;$;1.\" &\"/-$8&:R&&%$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.o &%2S\"\"6S7T/6#;1.\" &\"/($8\":U\"! )(\"'#&'#.F &%2V\"\"6V7W/6#;1.\" &\"/($8\":X\"! )(\"'#&'#"),
          peg$decode("%%%<2Y\"\"6Y7Z=.##&&!&'#/2#2[\"\"6[7\\/#$+\")(\"'#&'#/' 8!:]!! ).Z &%%%<2^\"\"6^7_=.##&&!&'#/2#2`\"\"6`7a/#$+\")(\"'#&'#/' 8!:]!! )"),
          peg$decode("%2b\"\"6b7c/1#;8/($8\":d\"! )(\"'#&'#"),
          peg$decode("%;4/E#;/.\" &\"/7$;3.\" &\"/)$8#:e#\"\" )(#'#(\"'#&'#"),
          peg$decode("%2f\"\"6f7g/1#;./($8\":h\"! )(\"'#&'#.\u025C &%2i\"\"6i7j/& 8!:k! ).\u0245 &%2l\"\"6l7m/& 8!:n! ).\u022E &%2o\"\"6o7p/& 8!:q! ).\u0217 &%2r\"\"6r7s/& 8!:t! ).\u0200 &%2u\"\"6u7v/& 8!:w! ).\u01E9 &%2x\"\"6x7y/& 8!:z! ).\u01D2 &%2{\"\"6{7|/& 8!:k! ).\u01BB &%2}\"\"6}7~/& 8!:n! ).\u01A4 &%2\x7F\"\"6\x7F7\x80/& 8!:q! ).\u018D &%2\x81\"\"6\x817\x82/& 8!:t! ).\u0176 &%2\x83\"\"6\x837\x84/& 8!:\x85! ).\u015F &%2b\"\"6b7c/& 8!:\x86! ).\u0148 &%2\x87\"\"6\x877\x88/& 8!:\x89! ).\u0131 &%2\x8A\"\"6\x8A7\x8B/& 8!:\x8C! ).\u011A &%2\x8D\"\"6\x8D7\x8E/& 8!:\x8F! ).\u0103 &%2\x90\"\"6\x907\x91/& 8!:\x92! ).\xEC &%2\x93\"\"6\x937\x94/& 8!:\x95! ).\xD5 &%2Y\"\"6Y7Z/& 8!:\x96! ).\xBE &%2\x97\"\"6\x977\x98/& 8!:\x99! ).\xA7 &%2\x9A\"\"6\x9A7\x9B/& 8!:\x9C! ).\x90 &%2\x9D\"\"6\x9D7\x9E/& 8!:\x9F! ).y &%2\xA0\"\"6\xA07\xA1/& 8!:\xA2! ).b &%2\xA3\"\"6\xA37\xA4/& 8!:\xA5! ).K &%2\xA6\"\"6\xA67\xA7/& 8!:\xA8! ).4 &%2\xA9\"\"6\xA97\xAA/& 8!:\xAB! )"),
          peg$decode(";9.# &;:"),
          peg$decode("%;5/C#;;.\" &\"/5$;9/,$;:/#$+$)($'#(#'#(\"'#&'#"),
          peg$decode("%;./J#$2F\"\"6F7G/,#0)*2F\"\"6F7G&&&#/($8\":H\"!!)(\"'#&'#"),
          peg$decode("4\xAC\"\"5!7\xAD"),
          peg$decode("4\xAE\"\"5!7\xAF"),
          peg$decode("4\xB0\"\"5!7\xB1"),
          peg$decode("2\xB2\"\"6\xB27\xB3"),
          peg$decode("2\xB2\"\"6\xB27\xB3.) &2\xB4\"\"6\xB47\xB5")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


        function makeInteger(o) {
            return parseInt(o.join(""), 10);
        }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();